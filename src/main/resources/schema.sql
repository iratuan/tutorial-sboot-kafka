-- Remove as tabelas pedidos_produtos, registro_envio_email, pedidos, produtos e clientes se elas já existirem, com CASCADE para evitar conflitos
DROP TABLE IF EXISTS public.pedidos_produtos CASCADE;
DROP TABLE IF EXISTS public.registro_envio_email CASCADE;
DROP TABLE IF EXISTS public.pedidos CASCADE;
DROP TABLE IF EXISTS public.produtos CASCADE;
DROP TABLE IF EXISTS public.clientes CASCADE;

-- Criação da tabela clientes, que armazena informações dos clientes
CREATE TABLE public.clientes
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único do cliente
    nome     VARCHAR(255)       NOT NULL,                         -- Nome do cliente, obrigatório
    cpf      VARCHAR(14) UNIQUE NOT NULL,                         -- CPF único do cliente, obrigatório
    email    VARCHAR(255) UNIQUE,                                 -- E-mail único do cliente, opcional
    telefone VARCHAR(20)                                          -- Telefone do cliente
);

-- Define o proprietário da tabela clientes como o usuário postgres
ALTER TABLE public.clientes
    OWNER TO postgres;

-- Criação da tabela produtos, que armazena os produtos disponíveis para compra
CREATE TABLE public.produtos
(
    preco NUMERIC(38, 2),                                      -- Preço do produto, com precisão de até 38 dígitos e 2 decimais
    id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único do produto
    nome  VARCHAR(255)                                         -- Nome do produto
);

-- Define o proprietário da tabela produtos como o usuário postgres
ALTER TABLE public.produtos
    OWNER TO postgres;

-- Criação da tabela pedidos, que armazena as informações dos pedidos realizados pelos clientes
CREATE TABLE public.pedidos
(
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único do pedido
    status           VARCHAR(255),                                        -- Status do pedido, como "em processamento"
    data_criacao     TIMESTAMP,                                           -- Data de criação do pedido
    data_atualizacao TIMESTAMP,                                           -- Data de atualização do pedido
    cliente_id       BIGINT NOT NULL                                      -- Chave estrangeira para o cliente que fez o pedido
);

-- Define o proprietário da tabela pedidos como o usuário postgres
ALTER TABLE public.pedidos
    OWNER TO postgres;

-- Define a chave estrangeira na tabela pedidos para referenciar a tabela clientes
ALTER TABLE public.pedidos
    ADD CONSTRAINT fk_cliente
        FOREIGN KEY (cliente_id) REFERENCES public.clientes (id);

-- Criação da tabela de associação pedidos_produtos para relacionar pedidos com produtos
CREATE TABLE public.pedidos_produtos
(
    pedido_id  BIGINT NOT NULL,                              -- ID do pedido, chave estrangeira para pedidos
    produto_id BIGINT NOT NULL,                              -- ID do produto, chave estrangeira para produtos
    PRIMARY KEY (pedido_id, produto_id),                     -- Define a chave composta para evitar duplicação de associação
    FOREIGN KEY (pedido_id) REFERENCES public.pedidos (id),  -- Chave estrangeira para pedidos
    FOREIGN KEY (produto_id) REFERENCES public.produtos (id) -- Chave estrangeira para produtos
);

-- Define o proprietário da tabela de associação pedidos_produtos como o usuário postgres
ALTER TABLE public.pedidos_produtos
    OWNER TO postgres;

-- Tabela para registrar os envios de e-mail
CREATE TABLE public.registro_envio_email
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- Identificador único do registro
    cliente_id BIGINT    NOT NULL,                                  -- Código do cliente
    pedido_id  BIGINT    NOT NULL,                                  -- Código do pedido
    data_envio TIMESTAMP NOT NULL                                   -- Data e hora do envio do e-mail
);

-- Define o proprietário da tabela registro_envio_email como o usuário postgres
ALTER TABLE public.registro_envio_email
    OWNER TO postgres;

-- Chave estrangeira para cliente
ALTER TABLE public.registro_envio_email
    ADD CONSTRAINT fk_cliente_email
        FOREIGN KEY (cliente_id) REFERENCES public.clientes (id);

-- Chave estrangeira para pedido
ALTER TABLE public.registro_envio_email
    ADD CONSTRAINT fk_pedido_email
        FOREIGN KEY (pedido_id) REFERENCES public.pedidos (id);

-- Inserção de dados de exemplo na tabela clientes
INSERT INTO public.clientes (nome, cpf, email, telefone)
VALUES ('João da Silva', '123.456.789-00', 'joao.silva@example.com', '(11) 91234-5678');

-- Inserção de dados de exemplo na tabela produtos
INSERT INTO public.produtos (preco, nome)
VALUES (19.99, 'Hamburger'); -- Produto 1: Hamburger com preço de 19.99
INSERT INTO public.produtos (preco, nome)
VALUES (7.00, 'Refrigerante de cola'); -- Produto 2: Refrigerante de cola com preço de 7.00
INSERT INTO public.produtos (preco, nome)
VALUES (9.99, 'Sobremesa de chocolate'); -- Produto 3: Sobremesa de chocolate com preço de 9.99
